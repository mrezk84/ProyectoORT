// Code generated by mockery v2.33.0. DO NOT EDIT.

package service

import (
	context "context"
	models "proyectoort/utils/models"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// AddCheckForm provides a mock function with given fields: ctx, checkID, formularioID
func (_m *MockService) AddCheckForm(ctx context.Context, checkID int64, formularioID int64) error {
	ret := _m.Called(ctx, checkID, formularioID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, checkID, formularioID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddForm provides a mock function with given fields: ctx, id, formulario
func (_m *MockService) AddForm(ctx context.Context, id int, formulario models.Formulario) error {
	ret := _m.Called(ctx, id, formulario)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, models.Formulario) error); ok {
		r0 = rf(ctx, id, formulario)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddObraPiso provides a mock function with given fields: ctx, obraID, pisoID
func (_m *MockService) AddObraPiso(ctx context.Context, obraID int64, pisoID int64) error {
	ret := _m.Called(ctx, obraID, pisoID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, obraID, pisoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserRole provides a mock function with given fields: ctx, userID, roleID
func (_m *MockService) AddUserRole(ctx context.Context, userID int64, roleID int64) error {
	ret := _m.Called(ctx, userID, roleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllRoles provides a mock function with given fields: ctx
func (_m *MockService) GetAllRoles(ctx context.Context) ([]models.Rol, error) {
	ret := _m.Called(ctx)

	var r0 []models.Rol
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Rol, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Rol); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Rol)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetControls provides a mock function with given fields: ctx
func (_m *MockService) GetControls(ctx context.Context) ([]models.Control, error) {
	ret := _m.Called(ctx)

	var r0 []models.Control
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Control, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Control); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Control)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetForms provides a mock function with given fields: ctx
func (_m *MockService) GetForms(ctx context.Context) ([]models.Formulario, error) {
	ret := _m.Called(ctx)

	var r0 []models.Formulario
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Formulario, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Formulario); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Formulario)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctc
func (_m *MockService) GetUsers(ctc context.Context) ([]models.Usuario, error) {
	ret := _m.Called(ctc)

	var r0 []models.Usuario
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Usuario, error)); ok {
		return rf(ctc)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Usuario); ok {
		r0 = rf(ctc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Usuario)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, email, password
func (_m *MockService) LoginUser(ctx context.Context, email string, password string) (*models.Usuario, error) {
	ret := _m.Called(ctx, email, password)

	var r0 *models.Usuario
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Usuario, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Usuario); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Usuario)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterCheck provides a mock function with given fields: ctx, estado, observaciones, version, fecha
func (_m *MockService) RegisterCheck(ctx context.Context, estado string, observaciones string, version int, fecha string) error {
	ret := _m.Called(ctx, estado, observaciones, version, fecha)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, string) error); ok {
		r0 = rf(ctx, estado, observaciones, version, fecha)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterControl provides a mock function with given fields: ctx, descripcion, tipo
func (_m *MockService) RegisterControl(ctx context.Context, descripcion string, tipo string) error {
	ret := _m.Called(ctx, descripcion, tipo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, descripcion, tipo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterEtapa provides a mock function with given fields: ctx, nombre
func (_m *MockService) RegisterEtapa(ctx context.Context, nombre string) error {
	ret := _m.Called(ctx, nombre)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nombre)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterFrom provides a mock function with given fields: ctx, informacion, nombre, version, fecha, etapa_id, usuario_id
func (_m *MockService) RegisterFrom(ctx context.Context, informacion string, nombre string, version string, fecha string, etapa_id int, usuario_id int) error {
	ret := _m.Called(ctx, informacion, nombre, version, fecha, etapa_id, usuario_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, int, int) error); ok {
		r0 = rf(ctx, informacion, nombre, version, fecha, etapa_id, usuario_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterObra provides a mock function with given fields: ctx, name
func (_m *MockService) RegisterObra(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterPiso provides a mock function with given fields: ctx, number
func (_m *MockService) RegisterPiso(ctx context.Context, number int64) error {
	ret := _m.Called(ctx, number)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, number)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterRol provides a mock function with given fields: ctx, nombre
func (_m *MockService) RegisterRol(ctx context.Context, nombre string) error {
	ret := _m.Called(ctx, nombre)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nombre)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterUser provides a mock function with given fields: ctx, email, name, password
func (_m *MockService) RegisterUser(ctx context.Context, email string, name string, password string) error {
	ret := _m.Called(ctx, email, name, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, email, name, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveUserRole provides a mock function with given fields: ctx, userID, roleID
func (_m *MockService) RemoveUserRole(ctx context.Context, userID int64, roleID int64) error {
	ret := _m.Called(ctx, userID, roleID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userID, roleID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
